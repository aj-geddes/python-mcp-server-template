name: Python Code Quality Check

on:
  push:
    branches: [ master, develop ]
    paths:
      - '**/*.py'
  pull_request:
    branches: [ master, develop ]
    paths:
      - '**/*.py'
  workflow_dispatch:
    inputs:
      run_tests:
        description: 'Run full test suite'
        required: false
        default: 'true'
        type: boolean
      python_version:
        description: 'Python version for testing'
        required: false
        default: '3.12'
        type: choice
        options: ['3.10', '3.11', '3.12']
      coverage_threshold:
        description: 'Coverage threshold percentage'
        required: false
        default: '80'
        type: string
      skip_docker:
        description: 'Skip Docker build test'
        required: false
        default: 'false'
        type: boolean

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 black isort mypy bandit safety

      - name: Run Black (formatter)
        id: black
        continue-on-error: true
        run: |
          echo "## Black Code Formatting" >> $GITHUB_STEP_SUMMARY
          if ! black --check --diff .; then
            echo "black_failed=true" >> $GITHUB_OUTPUT
            echo "::warning file=./::Black formatting issues. Run 'black .'." >> $GITHUB_STEP_SUMMARY
          else
            echo "black_failed=false" >> $GITHUB_OUTPUT
          fi

      - name: Run isort (import sort)
        id: isort
        continue-on-error: true
        run: |
          echo "## isort" >> $GITHUB_STEP_SUMMARY
          if ! isort --check-only --diff .; then
            echo "isort_failed=true" >> $GITHUB_OUTPUT
            echo "::warning::isort sorting issues. Run 'isort .'." >> $GITHUB_STEP_SUMMARY
          else
            echo "isort_failed=false" >> $GITHUB_OUTPUT
          fi

      - name: Run Flake8
        id: flake8
        continue-on-error: true
        run: |
          echo "## Flake8" >> $GITHUB_STEP_SUMMARY
          if ! flake8 --max-line-length=88 --extend-ignore=E203,W503 .; then
            echo "flake8_failed=true" >> $GITHUB_OUTPUT
            echo "::warning::Flake8 style issues found." >> $GITHUB_STEP_SUMMARY
          else
            echo "flake8_failed=false" >> $GITHUB_OUTPUT
          fi

      - name: Run MyPy
        id: mypy
        continue-on-error: true
        run: |
          echo "## MyPy" >> $GITHUB_STEP_SUMMARY
          if ! mypy --ignore-missing-imports .; then
            echo "mypy_failed=true" >> $GITHUB_OUTPUT
            echo "::warning::MyPy type checking issues." >> $GITHUB_STEP_SUMMARY
          else
            echo "mypy_failed=false" >> $GITHUB_OUTPUT
          fi

      - name: Run Bandit
        id: bandit
        run: |
          echo "## Bandit" >> $GITHUB_STEP_SUMMARY
          if ! bandit -r . -f json -o bandit-report.json; then
            echo "bandit_failed=true" >> $GITHUB_OUTPUT
          else
            echo "bandit_failed=false" >> $GITHUB_OUTPUT
          fi

      - name: Run Safety
        id: safety
        run: |
          echo "## Safety" >> $GITHUB_STEP_SUMMARY
          if ! safety check --bare; then
            echo "safety_failed=true" >> $GITHUB_OUTPUT
          else
            echo "safety_failed=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Issue on Failure
        if: >
          github.ref == 'refs/heads/master' &&
          (
            steps.black.outputs.black_failed == 'true' ||
            steps.isort.outputs.isort_failed == 'true' ||
            steps.flake8.outputs.flake8_failed == 'true' ||
            steps.mypy.outputs.mypy_failed == 'true' ||
            steps.bandit.outputs.bandit_failed == 'true' ||
            steps.safety.outputs.safety_failed == 'true'
          )
        uses: actions/github-script@v7
        with:
          script: |
            const failStates = {
              black: '${{ steps.black.outputs.black_failed }}',
              isort: '${{ steps.isort.outputs.isort_failed }}',
              flake8: '${{ steps.flake8.outputs.flake8_failed }}',
              mypy: '${{ steps.mypy.outputs.mypy_failed }}',
              bandit: '${{ steps.bandit.outputs.bandit_failed }}',
              safety: '${{ steps.safety.outputs.safety_failed }}'
            };

            let body = `## Code Quality Checks Failed on ${context.sha.substring(0,7)}\n\n`;
            Object.entries(failStates).forEach(([tool, failed]) => {
              body += `- **${tool}**: ${failed === 'true' ? '❌' : '✅'}\n`;
            });

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Code Quality Issues • ${context.sha.substring(0,7)}`,
              body,
              labels: ['automation', 'code-quality']
            });

  test:
    needs: lint
    runs-on: ubuntu-latest
    if: >
      ${{ needs.lint.result == 'success' }} &&
      ${{ github.event.inputs.run_tests == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ github.event.inputs.python_version }}

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run tests
        id: pytest
        run: |
          echo "## Tests" >> $GITHUB_STEP_SUMMARY
          pytest tests/ --cov=mcp_server --cov-report=term --cov-report=xml --cov-fail-under=${{ github.event.inputs.coverage_threshold }}

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          file: coverage.xml
          flags: tests
          fail_ci_if_error: false

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            coverage.xml
            htmlcov/
          retention-days: 30

      - name: Docker build (optional)
        if: ${{ github.event.inputs.skip_docker == 'false' }}
        run: |
          docker build -t test-mcp-server .
