name: Python Code Quality Check

on:
  push:
    branches: [ master, develop ]
    paths:
      - '**/*.py'
  pull_request:
    branches: [ master, develop ]
    paths:
      - '**/*.py'
  workflow_dispatch:
    inputs:
      run_tests:
        description: 'Run full test suite'
        required: false
        default: 'true'
        type: boolean
      python_version:
        description: 'Python version for testing'
        required: false
        default: '3.12'
        type: choice
        options: ['3.10', '3.11', '3.12']
      coverage_threshold:
        description: 'Coverage threshold percentage'
        required: false
        default: '80'
        type: string
      skip_docker:
        description: 'Skip Docker build test'
        required: false
        default: 'false'
        type: boolean

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    name: lint (Python ${{ matrix.python-version }})

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install black isort bandit safety

      - name: Run Black
        run: black --check --diff .

      - name: Run isort
        run: isort --check-only --diff .

      - name: Run Bandit
        run: bandit -r . -f json -o bandit-report.json

      - name: Run Safety
        run: safety check --bare

  test:
    needs: lint
    runs-on: ubuntu-latest
    if: >
      ${{ needs.lint.result == 'success' }} &&
      ${{ github.event.inputs.run_tests == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ github.event.inputs.python_version || '3.12' }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run tests with coverage
        id: pytest
        run: |
          echo "## Tests" >> $GITHUB_STEP_SUMMARY
          pytest tests/ --cov=mcp_server --cov-report=term --cov-report=xml --cov-fail-under=${{ github.event.inputs.coverage_threshold || '80' }}

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: coverage.xml
          flags: unittests
          fail_ci_if_error: false

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            coverage.xml
            htmlcov/
          retention-days: 30

      - name: Docker Build Test (optional)
        if: ${{ github.event.inputs.skip_docker == 'false' }}
        run: docker build -t test-mcp-server .

  report:
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - name: Summarize matrix results and report
        uses: actions/github-script@v7
        with:
          script: |
            const matrixVersions = ['3.10', '3.11', '3.12'];
            const conclusions = {
              success: '✅',
              failure: '❌',
              cancelled: '🚫',
              skipped: '⏭️',
              timed_out: '⌛',
              neutral: 'ℹ️'
            };

            const jobs = await github.rest.actions.listJobsForWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId
            });

            const results = matrixVersions.map(version => {
              const job = jobs.data.jobs.find(j => j.name.includes(`lint (Python ${version}`));
              return {
                version,
                conclusion: job?.conclusion || 'unknown',
                url: job?.html_url || ''
              };
            });

            let summary = `<!-- quality-report -->\n## 🧪 Python Code Quality Matrix Report\n\n`;
            summary += `| Python Version | Status |\n`;
            summary += `|----------------|--------|\n`;

            for (const r of results) {
              const icon = conclusions[r.conclusion] || '❓';
              summary += `| \`${r.version}\` | ${icon} ${r.url ? `[Logs](${r.url})` : ''} |\n`;
            }

            const anyFailures = results.some(r => r.conclusion !== 'success');
            summary += anyFailures
              ? `\n**Some checks failed. Please review the logs above.**\n`
              : `\n✅ All checks passed across all Python versions.\n`;

            const isDispatch = context.eventName === 'workflow_dispatch';

            if (isDispatch) {
              const existing = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                labels: 'automation,code-quality'
              });

              for (const issue of existing.data) {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: `Closing previous report for new workflow run at \`${context.sha.substring(0, 7)}\`.`
                });
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  state: 'closed'
                });
              }

              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Code Quality Matrix Report • ${context.sha.substring(0, 7)}`,
                body: summary,
                labels: ['automation', 'code-quality']
              });

            } else if (context.payload.pull_request?.number) {
              const prNumber = context.payload.pull_request.number;

              const comments = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber
              });

              const existing = comments.data.find(c =>
                c.body.includes('<!-- quality-report -->') &&
                c.user.type === 'Bot'
              );

              if (existing) {
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: existing.id,
                  body: summary
                });
              } else {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber,
                  body: summary
                });
              }
            } else {
              console.log('Not a PR or workflow_dispatch. Skipping output.');
            }
